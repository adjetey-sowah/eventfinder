name: Build, Push to ECR, and Deploy to ECS

on:
  push:
    branches: [ main ]

env:
  AWS_REGION: us-west-2
  ECR_PUBLIC_REPOSITORY: public.ecr.aws/r1b3l1w9/giftedlabs/eventfinder
  ECS_CLUSTER: eventfinder-cluster
  ECS_SERVICE: eventfinder-service
  ECS_TASK_DEFINITION: .aws/task-definition.json
  CONTAINER_NAME: nginx
  CODEDEPLOY_APPLICATION: eventfinder-app
  CODEDEPLOY_DEPLOYMENT_GROUP: eventfinder-deployment-group

jobs:
  build-push-deploy:
    name: Build and Push to ECR and Deploy to ECS
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Configure AWS Credentials for ECR Public (us-east-1)
      - name: Configure AWS Credentials for ECR Public
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      # Login to Amazon ECR Public
      - name: Login to Amazon ECR Public
        uses: aws-actions/amazon-ecr-login@v1
        with:
          registry-type: public

      # Build the Docker image
      - name: Build Docker Image
        run: |
          docker build -t eventfinder .

      # Tag and push the image to the Public ECR repository
      - name: Tag and Push Image to Public ECR
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker tag eventfinder:latest ${{ env.ECR_PUBLIC_REPOSITORY }}:$IMAGE_TAG
          docker push ${{ env.ECR_PUBLIC_REPOSITORY }}:$IMAGE_TAG
          docker tag ${{ env.ECR_PUBLIC_REPOSITORY }}:$IMAGE_TAG ${{ env.ECR_PUBLIC_REPOSITORY }}:latest
          docker push ${{ env.ECR_PUBLIC_REPOSITORY }}:latest
          echo "image=${{ env.ECR_PUBLIC_REPOSITORY }}:$IMAGE_TAG" >> $GITHUB_ENV

      # Reconfigure AWS credentials for ECS deployment (us-west-2)
      - name: Configure AWS Credentials for ECS
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      # Download the existing ECS task definition
      - name: Download ECS Task Definition
        run: |
          aws ecs describe-task-definition --task-definition ${{ env.ECS_TASK_DEFINITION }} > task-definition.json

      # Update the ECS task definition with the new image
      - name: Update ECS Task Definition
        run: |
          sed -i 's#image": ".*#image": "${{ env.ECR_PUBLIC_REPOSITORY }}:${{ github.sha }}",#' task-definition.json
          echo "TASK_DEFINITION=$(jq -r .taskDefinition.taskDefinitionArn task-definition.json)" >> $GITHUB_ENV

      # Register the new task definition
      - name: Register ECS Task Definition
        run: |
          aws ecs register-task-definition --cli-input-json file://task-definition.json

      # Update the appspec.yaml file with the new task definition ARN
      - name: Update AppSpec File
        run: |
          sed -i "s|<TASK_DEFINITION>|${{ env.TASK_DEFINITION }}|g" appspec.yaml

      # Start deployment via CodeDeploy
      - name: Deploy to ECS via CodeDeploy
        run: |
          aws deploy create-deployment \
            --application-name ${{ env.CODEDEPLOY_APPLICATION }} \
            --deployment-group-name ${{ env.CODEDEPLOY_DEPLOYMENT_GROUP }} \
            --revision "{
              \"revisionType\": \"AppSpecContent\",
              \"appSpecContent\": {
                \"content\": \"$(cat appspec.yaml)\"
              }
            }" \
            --deployment-config-name CodeDeployDefault.ECSAllAtOnce \
            --description "Deployment triggered by GitHub Actions"
