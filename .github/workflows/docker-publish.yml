name: Build, Push to ECR, and Deploy to ECS

on:
  push:
    branches: [ main ]

env:
  AWS_REGION: us-west-2
  ECR_PUBLIC_REPOSITORY: public.ecr.aws/r1b3l1w9/giftedlabs/eventfinder
  ECS_CLUSTER: eventfinder-cluster
  ECS_SERVICE: eventfinder-service
  ECS_TASK_DEFINITION: .aws/task-definition.json
  CONTAINER_NAME: nginx

jobs:
  build-push-deploy:
    name: Build and Push to ECR and then Deploy to ECS
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Configure AWS Credentials (Public ECR is in us-east-1, but your app is in us-west-2)
      - name: Configure AWS Credentials for ECR Public
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      # Login to Amazon ECR Public
      - name: Login to Amazon ECR Public
        uses: aws-actions/amazon-ecr-login@v1
        with:
          registry-type: public

      # Build the Docker image
      - name: Build Docker Image
        run: |
          docker build -t eventfinder .

      # Tag and push the image to the Public ECR repository
      - name: Tag and Push Image to Public ECR
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker tag eventfinder:latest ${{ env.ECR_PUBLIC_REPOSITORY }}:$IMAGE_TAG
          docker push ${{ env.ECR_PUBLIC_REPOSITORY }}:$IMAGE_TAG
          docker tag ${{ env.ECR_PUBLIC_REPOSITORY }}:$IMAGE_TAG ${{ env.ECR_PUBLIC_REPOSITORY }}:latest
          docker push ${{ env.ECR_PUBLIC_REPOSITORY }}:latest
          echo "::set-output name=image::${{ env.ECR_PUBLIC_REPOSITORY }}:$IMAGE_TAG"

      # Reconfigure AWS credentials for ECS deployment (us-west-2)
      - name: Configure AWS Credentials for ECS
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      # Fill in the new image ID in the Amazon ECS task definition
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ env.ECR_PUBLIC_REPOSITORY }}:${{ github.sha }}

      # Register the new task definition
      - name: Register the new task definition
        id: register_task_definition
        run: |
          TASK_DEF_ARN=$(aws ecs register-task-definition --cli-input-json file://${{ steps.task-def.outputs.task-definition }} --query 'taskDefinition.taskDefinitionArn' --output text)
          echo "TASK_DEF_ARN=$TASK_DEF_ARN" >> $GITHUB_ENV


      - name: Create AppSpec file
        run: |
          cat > appspec.yaml << 'EOF'
          version: 0.0
          Resources:
          - TargetService:
             Type: AWS::ECS::Service
             Properties:
               TaskDefinition: "${TASK_DEF_ARN}"
               LoadBalancerInfo:
                 ContainerName: "nginx"
                 ContainerPort: 5000
               PlatformVersion: "LATEST"
          EOF
          
          # Replace placeholder with actual task definition ARN
          sed -i "s|\${TASK_DEF_ARN}|${{ steps.task-def.outputs.task_definition_arn }}|g" appspec.yaml
          
          # Print AppSpec for debugging
          cat appspec.yaml

      # Update the appspec.yaml file with the new task definition ARN
      - name: Update AppSpec File
        run: |
          sed -i "s|<TASK_DEFINITION>|${{ env.TASK_DEFINITION }}|g" appspec.yaml


      # Start deployment via CodeDeploy
          # Start deployment via CodeDeploy
      - name: Start CodeDeploy deployment
        run: |
          aws deploy create-deployment \
            --application-name AppECS-Event-Cluster-eventfinder-service \
            --deployment-group-name eventfinder-deployment-group \
            --revision "revisionType=AppSpecContent,appSpecContent={content='$(cat appspec.yaml | base64)'}" \
            --deployment-config-name CodeDeployDefault.ECSAllAtOnce \
            --description "Deployment triggered by GitHub Actions"