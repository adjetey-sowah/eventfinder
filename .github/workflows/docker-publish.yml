name: Build and Deploy to ECS

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '*.yaml'
      - '*.yml'
      - '.github/workflows/cloudformation.yml'
      - 'README.md'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      ECR_REPOSITORY_URI : public.ecr.aws/r1b3l1w9/giftedlabs/eventfinder

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      # Configure AWS Credentials (Public ECR is in us-east-1, but your app is in us-west-2)
      - name: Configure AWS Credentials for ECR Public
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      # Login to Amazon ECR Public
      - name: Login to Amazon ECR Public
        uses: aws-actions/amazon-ecr-login@v1
        with:
          registry-type: public


      # Build and push the image to ECR
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        run: |
          docker build -t ${{ env.ECR_REPOSITORY_URI }}:${{ github.sha }} .
          docker tag ${{ env.ECR_REPOSITORY_URI }}:${{ github.sha }} ${{ env.ECR_REPOSITORY_URI }}:latest
          docker push ${{ env.ECR_REPOSITORY_URI }}:${{ github.sha }}
          docker push ${{ env.ECR_REPOSITORY_URI }}:latest
          echo "IMAGE_URI=${{ env.ECR_REPOSITORY_URI }}:${{ github.sha }}" >> $GITHUB_ENV


      - name: Create AppSpec and TaskDef files
        run: |
          # Get task definition values
          TASK_DEF_ARN=$(aws ecs describe-task-definition --region us-west-2 --task-definition eventfinder-definition --query "taskDefinition.taskDefinitionArn" --output text)
          TASK_DEF_FAMILY=$(echo $TASK_DEF_ARN | cut -d'/' -f2 | cut -d':' -f1)
          
          # Create appspec.yaml
          cat > appspec.yaml << EOF
          version: 0.0
          Resources:
            - TargetService:
                Type: AWS::ECS::Service
                Properties:
                  TaskDefinition: <TASK_DEFINITION>
                  LoadBalancerInfo:
                    ContainerName: "eventfinder"
                    ContainerPort: 5000
          EOF
          
          # Create task definition JSON
          aws ecs describe-task-definition --task-definition $TASK_DEF_FAMILY --query "taskDefinition" > task-definition.json
          
          # Update the image in the task definition
          jq --arg IMAGE "$IMAGE_URI" '.containerDefinitions[0].image = $IMAGE' task-definition.json > updated-task-def.json
          mv updated-task-def.json task-definition.json

      - name: Deploy to AWS CodeDeploy
        run: |
          # Get deployment details
          CLUSTER_NAME=$(aws cloudformation describe-stacks --stack-name ECS --query "Stacks[0].Outputs[?OutputKey=='ECSCluster'].OutputValue" --output text)
          SERVICE_NAME=$(aws cloudformation describe-stacks --stack-name ECS --query "Stacks[0].Outputs[?OutputKey=='ECSService'].OutputValue" --output text)
          CODEDEPLOY_APP=$(aws cloudformation describe-stacks --stack-name ECS --query "Stacks[0].Outputs[?OutputKey=='CodeDeployApplication'].OutputValue" --output text)
          CODEDEPLOY_GROUP=$(aws cloudformation describe-stacks --stack-name ECS --query "Stacks[0].Outputs[?OutputKey=='CodeDeployDeploymentGroup'].OutputValue" --output text)
          
          # Register new task definition
          NEW_TASK_DEF_ARN=$(aws ecs register-task-definition --cli-input-json file://task-definition.json --query "taskDefinition.taskDefinitionArn" --output text)
          
          # Update appspec with new task definition
          sed -i "s|<TASK_DEFINITION>|$NEW_TASK_DEF_ARN|g" appspec.yaml
          
          # Create deployment
          aws deploy create-deployment \
            --application-name $CODEDEPLOY_APP \
            --deployment-group-name $CODEDEPLOY_GROUP \
            --revision revisionType=AppSpecContent,appSpecContent="{content=\"$(cat appspec.yaml)\"}" \
            --deployment-config-name CodeDeployDefault.ECSAllAtOnce \
            --description "Deployment from GitHub Actions"